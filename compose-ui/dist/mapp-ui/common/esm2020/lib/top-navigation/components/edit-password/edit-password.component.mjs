import { HttpParams } from '@angular/common/http';
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { Validators } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@angular/common/http";
import * as i3 from "@mapp-ui/notification-center";
import * as i4 from "@angular/platform-browser";
import * as i5 from "@angular/common";
import * as i6 from "@angular/material/button";
import * as i7 from "@angular/material/input";
import * as i8 from "@angular/material/form-field";
export class EditPasswordComponent {
    constructor(fb, http, nc, sanitizer, cd) {
        this.fb = fb;
        this.http = http;
        this.nc = nc;
        this.sanitizer = sanitizer;
        this.cd = cd;
        this.oldPasswordRequired = false;
    }
    get newPassword() {
        return this.form.get('new_psw');
    }
    get newPasswordConfirm() {
        return this.form.get('new_psw_confirm');
    }
    ngOnInit() {
        this.form = this.fb.group({
            new_psw: ['', Validators.required],
            new_psw_confirm: ['', Validators.required]
        }, {
            validators: control => {
                const psw = control.get('new_psw')?.value;
                const pswConfirm = control.get('new_psw_confirm');
                const pswConfirmVal = pswConfirm?.value;
                if (pswConfirmVal.length > 0 && pswConfirmVal !== psw) {
                    const passwordMatchError = { noPasswordMatch: true };
                    pswConfirm?.setErrors(passwordMatchError);
                    return passwordMatchError;
                }
                else {
                    return null;
                }
            }
        });
        if (this.oldPasswordRequired) {
            this.form.addControl('psw', this.fb.control('', Validators.required));
        }
    }
    updatePassword() {
        if (this.form.valid) {
            const data = this.form.value;
            data.suid = this.userId;
            data.action = 'changeSystemUserPassword';
            data.errorPage = '/inc/ecError.jsp';
            const body = new HttpParams({ fromObject: data });
            const responseHandler = (res) => {
                if (res.indexOf('ec-errors') > -1) {
                    this.errorMessage = this.sanitizer.bypassSecurityTrustHtml(res);
                }
                else {
                    this.nc.addNotification({
                        type: 'SUCCESS',
                        message: {
                            headline: 'Password updated successfully.'
                        }
                    });
                    this.errorMessage = null;
                }
                this.cd.markForCheck();
            };
            if (this.updatePasswordUrl) {
                this.http.post(this.updatePasswordUrl, body, { responseType: 'text' })
                    .subscribe({
                    next: responseHandler,
                    error: (err) => {
                        this.nc.addNotification({
                            type: 'ERROR',
                            message: {
                                headline: 'Password update failed.',
                                body: err.message
                            }
                        });
                    }
                });
            }
        }
    }
}
EditPasswordComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: EditPasswordComponent, deps: [{ token: i1.UntypedFormBuilder }, { token: i2.HttpClient }, { token: i3.NotificationService }, { token: i4.DomSanitizer }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
EditPasswordComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: EditPasswordComponent, selector: "mui-edit-password", inputs: { userId: "userId", updatePasswordUrl: "updatePasswordUrl", oldPasswordRequired: "oldPasswordRequired" }, ngImport: i0, template: "<section class=\"form-container\">\r\n  <h4 class=\"mat-h4\" i18n=\"@@topnav_setpasswd_title\">\r\n    Set a new password\r\n  </h4>\r\n\r\n  <form [formGroup]=\"form\">\r\n    <div class=\"two-col\">\r\n      <div class=\"col\">\r\n        <div *ngIf=\"oldPasswordRequired\">\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label i18n=\"@@topnav_oldpasswd\">Old Password</mat-label>\r\n            <input formControlName=\"psw\"\r\n                matInput\r\n                required\r\n                type=\"password\">\r\n            <mat-error i18n=\"@@topnav_field_required\">This field is required</mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        <div>\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label i18n=\"@@topnav_newpasswd\">New Password</mat-label>\r\n            <input formControlName=\"new_psw\"\r\n                matInput\r\n                required\r\n                type=\"password\">\r\n            <mat-error *ngIf=\"newPassword.hasError('required')\"\r\n                i18n=\"@@topnav_field_required\">This field is required</mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        <div>\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label i18n=\"@@topnav_confirmpasswd\">Confirm Password</mat-label>\r\n            <input formControlName=\"new_psw_confirm\"\r\n                matInput\r\n                required\r\n                type=\"password\">\r\n            <mat-error *ngIf=\"newPasswordConfirm.hasError('noPasswordMatch')\"\r\n                i18n=\"@@topnav_passwordnomatch\">Passwords do not match\r\n            </mat-error>\r\n            <mat-error *ngIf=\"newPasswordConfirm.hasError('required')\"\r\n                i18n=\"@@topnav_field_required\">This field is required</mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n      </div>\r\n      <div *ngIf=\"errorMessage\"\r\n          class=\"col error\">\r\n        <div [innerHTML]=\"errorMessage\"></div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"actions\">\r\n      <button (click)=\"updatePassword()\"\r\n          color=\"primary\"\r\n          mat-flat-button\r\n          type=\"submit\"\r\n          [disabled]=\"form.invalid\"\r\n          i18n=\"@@topnav_savebtn\"\r\n      >Save\r\n      </button>\r\n    </div>\r\n  </form>\r\n</section>\r\n", styles: [".actions{margin-top:14px;text-align:right}.form-container{padding:14px 0;font-size:14px}.two-col{display:flex;flex-direction:row;flex-wrap:nowrap}.two-col .col{width:50%}.two-col .col .mat-mdc-form-field{width:95%}.two-col .error{color:#cb3d44}\n"], dependencies: [{ kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i6.MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "directive", type: i7.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "component", type: i8.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i8.MatLabel, selector: "mat-label" }, { kind: "directive", type: i8.MatError, selector: "mat-error, [matError]", inputs: ["id"] }, { kind: "directive", type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: EditPasswordComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mui-edit-password', changeDetection: ChangeDetectionStrategy.OnPush, template: "<section class=\"form-container\">\r\n  <h4 class=\"mat-h4\" i18n=\"@@topnav_setpasswd_title\">\r\n    Set a new password\r\n  </h4>\r\n\r\n  <form [formGroup]=\"form\">\r\n    <div class=\"two-col\">\r\n      <div class=\"col\">\r\n        <div *ngIf=\"oldPasswordRequired\">\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label i18n=\"@@topnav_oldpasswd\">Old Password</mat-label>\r\n            <input formControlName=\"psw\"\r\n                matInput\r\n                required\r\n                type=\"password\">\r\n            <mat-error i18n=\"@@topnav_field_required\">This field is required</mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        <div>\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label i18n=\"@@topnav_newpasswd\">New Password</mat-label>\r\n            <input formControlName=\"new_psw\"\r\n                matInput\r\n                required\r\n                type=\"password\">\r\n            <mat-error *ngIf=\"newPassword.hasError('required')\"\r\n                i18n=\"@@topnav_field_required\">This field is required</mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        <div>\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label i18n=\"@@topnav_confirmpasswd\">Confirm Password</mat-label>\r\n            <input formControlName=\"new_psw_confirm\"\r\n                matInput\r\n                required\r\n                type=\"password\">\r\n            <mat-error *ngIf=\"newPasswordConfirm.hasError('noPasswordMatch')\"\r\n                i18n=\"@@topnav_passwordnomatch\">Passwords do not match\r\n            </mat-error>\r\n            <mat-error *ngIf=\"newPasswordConfirm.hasError('required')\"\r\n                i18n=\"@@topnav_field_required\">This field is required</mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n      </div>\r\n      <div *ngIf=\"errorMessage\"\r\n          class=\"col error\">\r\n        <div [innerHTML]=\"errorMessage\"></div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"actions\">\r\n      <button (click)=\"updatePassword()\"\r\n          color=\"primary\"\r\n          mat-flat-button\r\n          type=\"submit\"\r\n          [disabled]=\"form.invalid\"\r\n          i18n=\"@@topnav_savebtn\"\r\n      >Save\r\n      </button>\r\n    </div>\r\n  </form>\r\n</section>\r\n", styles: [".actions{margin-top:14px;text-align:right}.form-container{padding:14px 0;font-size:14px}.two-col{display:flex;flex-direction:row;flex-wrap:nowrap}.two-col .col{width:50%}.two-col .col .mat-mdc-form-field{width:95%}.two-col .error{color:#cb3d44}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.UntypedFormBuilder }, { type: i2.HttpClient }, { type: i3.NotificationService }, { type: i4.DomSanitizer }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { userId: [{
                type: Input
            }], updatePasswordUrl: [{
                type: Input
            }], oldPasswordRequired: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,