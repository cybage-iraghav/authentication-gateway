import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { LangChangeDialogComponent } from '../lang-change-dialog/lang-change-dialog.component';
import { TopNavDialogComponent } from '../top-nav-dialog/top-nav-dialog.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "../../services/session-timer.service";
import * as i3 from "../../services/top-navigation.service";
import * as i4 from "@angular/common";
import * as i5 from "@angular/material/menu";
import * as i6 from "@angular/material/button";
import * as i7 from "@angular/material/slide-toggle";
export class ProfileMenuComponent {
    constructor(dialog, timerService, topNavService) {
        this.dialog = dialog;
        this.timerService = timerService;
        this.topNavService = topNavService;
        this.isActiveMenu = false;
    }
    ngOnInit() {
        this.initSessionTimer();
        this.setUserInitials();
        this.prepareLanguageMenu();
    }
    onMenuOpened() {
        this.isActiveMenu = true;
    }
    onMenuClosed() {
        this.isActiveMenu = false;
    }
    onItemClicked(menuItem) {
        switch (menuItem.id) {
            case 'aux-user-settings':
                this.openAccountDialog(menuItem);
                break;
            default:
                this.handleGenericClick(menuItem);
        }
    }
    onLangMenuClicked(menuItem) {
        const config = {
            autoFocus: false,
            hasBackdrop: true,
            width: '500px'
        };
        const dialogRef = this.dialog.open(LangChangeDialogComponent, config);
        dialogRef.afterClosed().subscribe(res => {
            if (res === 'change' && menuItem.href) {
                this.topNavService.changeUILanguage(menuItem.href);
            }
        });
    }
    onSubMenuClosed() {
        // intentionally empty, just needed to refresh hover state in menu
    }
    toggleSessionTimer($event) {
        if ($event.checked) {
            this.timerService.stopKeepAlive();
        }
        else {
            this.timerService.startKeepAlive(true);
        }
    }
    openAccountDialog(item) {
        const config = {
            autoFocus: false,
            hasBackdrop: true,
            width: '700px',
            minHeight: 500,
            disableClose: true,
            panelClass: 'mui-top-nav-dialog',
            data: {
                ...item.properties,
                accountSettings: true
            }
        };
        this.dialog.open(TopNavDialogComponent, config);
    }
    handleGenericClick(menuItem) {
        if (menuItem.href) {
            window.location.assign(menuItem.href);
        }
    }
    setUserInitials() {
        const userName = this.navItem?.properties?.['userName'];
        if (userName) {
            this.userInitials = userName.split(' ')
                .reduce((prev, current) => {
                return prev + current.substring(0, 1);
            }, '');
        }
    }
    initSessionTimer() {
        const config = this.navItem?.menu?.find(itm => itm.id === 'aux-timer');
        if (config) {
            this.timerService.init(config);
        }
        this.isTimeoutActive$ = this.timerService.isTimeoutActive;
    }
    prepareLanguageMenu() {
        const mainLangEntry = this.navItem?.menu?.find(itm => itm.id === 'aux-user-lang');
        if (mainLangEntry && mainLangEntry.properties && mainLangEntry.menu) {
            const currentLangId = mainLangEntry.properties['currentLanguageId'];
            const index = mainLangEntry.menu.findIndex(i => i.id === currentLangId);
            if (index > -1) {
                const currentLangEntry = mainLangEntry.menu.splice(index, 1)[0];
                mainLangEntry.name = currentLangEntry.name;
            }
        }
    }
}
ProfileMenuComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: ProfileMenuComponent, deps: [{ token: i1.MatDialog }, { token: i2.SessionTimerService }, { token: i3.TopNavigationService }], target: i0.ɵɵFactoryTarget.Component });
ProfileMenuComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: ProfileMenuComponent, selector: "mui-profile-menu", inputs: { navItem: "navItem" }, ngImport: i0, template: "<button (menuClosed)=\"onMenuClosed()\"\r\n    (menuOpened)=\"onMenuOpened()\"\r\n    *ngIf=\"navItem.icon\"\r\n    [class.active]=\"isActiveMenu\"\r\n    [matMenuTriggerFor]=\"level2\"\r\n    class=\"mui-navitem-icon-btn\"\r\n    mat-icon-button\r\n    [id]=\"navItem.id\"\r\n>\r\n  <span *ngIf=\"!userInitials\"\r\n      class=\"mui-icons\">{{ navItem.icon }}</span>\r\n  <span *ngIf=\"userInitials\"\r\n      class=\"initials\">{{ userInitials }}</span>\r\n</button>\r\n\r\n<mat-menu #level2=\"matMenu\"\r\n    class=\"mui-navitem-menu\">\r\n  <ng-container *ngFor=\"let menuItem of navItem.menu\">\r\n    <ng-container [ngSwitch]=\"menuItem.id\">\r\n      <button *ngSwitchCase=\"'aux-user-lang'\"\r\n          [matMenuTriggerData]=\"{items: menuItem.menu}\"\r\n          [matMenuTriggerFor]=\"level3\"\r\n          class=\"mui-navitem-button\"\r\n          mat-menu-item\r\n          (menuClosed)=\"onSubMenuClosed()\"\r\n          [id]=\"'2-' + menuItem.id\"\r\n      >\r\n        <span>{{ menuItem.name }}</span>\r\n      </button>\r\n      <div *ngSwitchCase=\"'aux-timer'\"\r\n          class=\"mui-navitem-button\"\r\n          mat-menu-item\r\n          [id]=\"'2-' + menuItem.id\"\r\n      >\r\n        <mat-slide-toggle\r\n            (change)=\"toggleSessionTimer($event)\"\r\n            [checked]=\"isTimeoutActive$ | async\"\r\n            color=\"primary\"\r\n            labelPosition=\"before\"\r\n        >{{ menuItem.name }}</mat-slide-toggle>\r\n      </div>\r\n      <button *ngSwitchDefault\r\n          (click)=\"onItemClicked(menuItem)\"\r\n          class=\"mui-navitem-button\"\r\n          mat-menu-item\r\n          [id]=\"'2-' + menuItem.id\"\r\n      >\r\n        <span>{{ menuItem.name }}</span>\r\n      </button>\r\n    </ng-container>\r\n  </ng-container>\r\n</mat-menu>\r\n\r\n<mat-menu #level3=\"matMenu\"\r\n    class=\"mui-navitem-menu\">\r\n  <ng-template let-items=\"items\"\r\n      matMenuContent>\r\n    <button (click)=\"onLangMenuClicked(itm)\"\r\n        *ngFor=\"let itm of items\"\r\n        class=\"mui-navitem-button\"\r\n        mat-menu-item\r\n        [id]=\"'3-' + itm.id\"\r\n    >{{ itm.name}}</button>\r\n  </ng-template>\r\n</mat-menu>\r\n", styles: [":host{display:block;width:48px;height:100%}.mui-auxnav-button{width:100%;height:100%;border-radius:0}.mui-navitem-icon-btn{width:48px;height:100%;border-radius:0}#aux-user{padding:0}.initials{font-size:14px;font-weight:400;font-family:Open Sans,sans-serif;display:inline-block;width:32px;height:32px;border-radius:50%;line-height:32px;position:relative;top:-2px}.mui-navitem-button{font-size:16px;font-weight:400;letter-spacing:.02px}\n"], dependencies: [{ kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i4.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i4.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { kind: "component", type: i5.MatMenu, selector: "mat-menu", exportAs: ["matMenu"] }, { kind: "component", type: i5.MatMenuItem, selector: "[mat-menu-item]", inputs: ["disabled", "disableRipple", "role"], exportAs: ["matMenuItem"] }, { kind: "directive", type: i5.MatMenuContent, selector: "ng-template[matMenuContent]" }, { kind: "directive", type: i5.MatMenuTrigger, selector: "[mat-menu-trigger-for], [matMenuTriggerFor]", exportAs: ["matMenuTrigger"] }, { kind: "component", type: i6.MatIconButton, selector: "button[mat-icon-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i7.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["disabled", "disableRipple", "color", "tabIndex"], exportAs: ["matSlideToggle"] }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: ProfileMenuComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mui-profile-menu', changeDetection: ChangeDetectionStrategy.OnPush, template: "<button (menuClosed)=\"onMenuClosed()\"\r\n    (menuOpened)=\"onMenuOpened()\"\r\n    *ngIf=\"navItem.icon\"\r\n    [class.active]=\"isActiveMenu\"\r\n    [matMenuTriggerFor]=\"level2\"\r\n    class=\"mui-navitem-icon-btn\"\r\n    mat-icon-button\r\n    [id]=\"navItem.id\"\r\n>\r\n  <span *ngIf=\"!userInitials\"\r\n      class=\"mui-icons\">{{ navItem.icon }}</span>\r\n  <span *ngIf=\"userInitials\"\r\n      class=\"initials\">{{ userInitials }}</span>\r\n</button>\r\n\r\n<mat-menu #level2=\"matMenu\"\r\n    class=\"mui-navitem-menu\">\r\n  <ng-container *ngFor=\"let menuItem of navItem.menu\">\r\n    <ng-container [ngSwitch]=\"menuItem.id\">\r\n      <button *ngSwitchCase=\"'aux-user-lang'\"\r\n          [matMenuTriggerData]=\"{items: menuItem.menu}\"\r\n          [matMenuTriggerFor]=\"level3\"\r\n          class=\"mui-navitem-button\"\r\n          mat-menu-item\r\n          (menuClosed)=\"onSubMenuClosed()\"\r\n          [id]=\"'2-' + menuItem.id\"\r\n      >\r\n        <span>{{ menuItem.name }}</span>\r\n      </button>\r\n      <div *ngSwitchCase=\"'aux-timer'\"\r\n          class=\"mui-navitem-button\"\r\n          mat-menu-item\r\n          [id]=\"'2-' + menuItem.id\"\r\n      >\r\n        <mat-slide-toggle\r\n            (change)=\"toggleSessionTimer($event)\"\r\n            [checked]=\"isTimeoutActive$ | async\"\r\n            color=\"primary\"\r\n            labelPosition=\"before\"\r\n        >{{ menuItem.name }}</mat-slide-toggle>\r\n      </div>\r\n      <button *ngSwitchDefault\r\n          (click)=\"onItemClicked(menuItem)\"\r\n          class=\"mui-navitem-button\"\r\n          mat-menu-item\r\n          [id]=\"'2-' + menuItem.id\"\r\n      >\r\n        <span>{{ menuItem.name }}</span>\r\n      </button>\r\n    </ng-container>\r\n  </ng-container>\r\n</mat-menu>\r\n\r\n<mat-menu #level3=\"matMenu\"\r\n    class=\"mui-navitem-menu\">\r\n  <ng-template let-items=\"items\"\r\n      matMenuContent>\r\n    <button (click)=\"onLangMenuClicked(itm)\"\r\n        *ngFor=\"let itm of items\"\r\n        class=\"mui-navitem-button\"\r\n        mat-menu-item\r\n        [id]=\"'3-' + itm.id\"\r\n    >{{ itm.name}}</button>\r\n  </ng-template>\r\n</mat-menu>\r\n", styles: [":host{display:block;width:48px;height:100%}.mui-auxnav-button{width:100%;height:100%;border-radius:0}.mui-navitem-icon-btn{width:48px;height:100%;border-radius:0}#aux-user{padding:0}.initials{font-size:14px;font-weight:400;font-family:Open Sans,sans-serif;display:inline-block;width:32px;height:32px;border-radius:50%;line-height:32px;position:relative;top:-2px}.mui-navitem-button{font-size:16px;font-weight:400;letter-spacing:.02px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.MatDialog }, { type: i2.SessionTimerService }, { type: i3.TopNavigationService }]; }, propDecorators: { navItem: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,