import { Component, EventEmitter, Input, Optional, Output } from '@angular/core';
import { EMPTY, Subject } from 'rxjs';
import { debounce, map } from 'rxjs/operators';
import { MuiHeadernavService } from './mui-headernav.service';
import { HeadernavDialogComponent } from './headernav-dialog.component';
import * as i0 from "@angular/core";
import * as i1 from "./mui-headernav.service";
import * as i2 from "@angular/material/dialog";
import * as i3 from "@mapp-ui/notification-center";
import * as i4 from "@angular/common";
import * as i5 from "@angular/material/icon";
import * as i6 from "@angular/material/button";
import * as i7 from "@angular/material/menu";
import * as i8 from "@angular/material/input";
import * as i9 from "@angular/material/form-field";
import * as i10 from "@angular/material/badge";
import * as i11 from "./session-timer.component";
/**
 * Component which handles the navigation in the app header
 * @deprecated
 */
export class MuiHeadernavComponent {
    constructor(headernavService, dialog, notificationService) {
        this.headernavService = headernavService;
        this.dialog = dialog;
        this.notificationService = notificationService;
        /**
         * Flag to control the behavior when one of the items in the language menu is clicked.
         * If false (default), the language link will be executed, redirecting to CEP start page and activating new language.
         * If true, the language link will not be followed. Instead output event languageChanged will be fired.
         * see languageChanged
         */
        this.handleLanguageChange = false;
        /**
         * Control flag for the session timer.
         * If false (default), timer will only be refreshed when component initializes (i.e. page reload)
         * If true, user clicks will be monitored and used to reset the timer at certain intervals.
         */
        this.trackClicks = false; // for session timer
        /**
         * Output event which emits when a new language has been selected in the language picker menu and
         * handleLanguageChange is enabled.
         * Emits the locale string as payload.
         * see handleLanguageChange
         */
        this.languageChanged = new EventEmitter();
        this.searchFieldHidden = true;
        this.notificationCenterEnabled = false;
        this.helpLinkChanges = new Subject();
        this.initialized$ = new Subject();
    }
    ngOnChanges(changes) {
        if (changes['helpTopicId'] && changes['helpTopicId'].currentValue) {
            this.updateHelpLink(changes['helpTopicId'].currentValue);
        }
    }
    ngOnInit() {
        if (this.apiUrl) {
            this.headernavService
                .getNavigationItems(this.apiUrl)
                .subscribe(data => {
                this.navItems = data.topNav;
                this.initialized$.complete();
            });
            this.onHelpLinkChanges();
        }
        else {
            console.warn('MuiHeadernavConponent: No value set for [apiUrl]. No topnav items will be generated.');
        }
        if (this.notificationService && this.notificationCenter) {
            this.notificationCount = this.notificationService.unseenCounter;
            this.notificationBadgeHidden = this.notificationService.unseenCounter.pipe(map(x => x === 0));
            this.notificationCenterEnabled = true;
        }
        else {
            this.notificationCount = EMPTY;
        }
    }
    menuItemClicked($event, item) {
        if (item.blank) {
            $event.preventDefault();
            window.open(item.href);
        }
        else if (this.handleLanguageChange && typeof item.locale === 'string') {
            $event.preventDefault();
            this.languageChanged.emit(item.locale);
        }
        else if (typeof item.modal === 'object') {
            $event.preventDefault();
            this.createModal(item);
        }
    }
    toggleNotificationPanel() {
        if (this.notificationCenterEnabled) {
            this.notificationCenter.toggleState();
        }
    }
    onSearchTermEntered(searchTerm, searchUrl) {
        const searchQuery = searchUrl + encodeURIComponent(searchTerm);
        window.location.assign(searchQuery);
    }
    /**
     * Updates the help link to point to a new help topic
     * @param helpKey The new help key to assign to the link
     */
    updateHelpLink(helpKey) {
        this.helpLinkChanges.next(helpKey);
    }
    onHelpLinkChanges() {
        this.helpLinkChanges.pipe(debounce(() => this.initialized$))
            .subscribe(helpKey => {
            const helpSection = this.navItems.find((value) => value.type === 'help');
            if (helpSection) {
                const helpLinkItem = helpSection.menu.find((value) => value.id === 'tn-help-onlinehelp');
                if (helpLinkItem) {
                    try {
                        const helpUrl = new URL(helpLinkItem.href);
                        if (helpUrl.searchParams.get('label') !== null) {
                            helpUrl.searchParams.set('label', `Engage_${helpKey}`);
                            helpUrl.hash = '';
                        }
                        else {
                            // TODO old help link, remove after migration done
                            helpUrl.hash = helpKey;
                        }
                        helpLinkItem.href = helpUrl.toString();
                    }
                    catch (e) {
                        console.error('failed parsing help url', e);
                    }
                }
            }
        });
    }
    createModal(item) {
        this.dialog.open(HeadernavDialogComponent, {
            data: item,
            panelClass: item.modal.class
        });
    }
}
MuiHeadernavComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: MuiHeadernavComponent, deps: [{ token: i1.MuiHeadernavService }, { token: i2.MatDialog }, { token: i3.NotificationService, optional: true }], target: i0.ɵɵFactoryTarget.Component });
MuiHeadernavComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: MuiHeadernavComponent, selector: "mui-headernav", inputs: { apiUrl: "apiUrl", handleLanguageChange: "handleLanguageChange", notificationCenter: "notificationCenter", trackClicks: "trackClicks", helpTopicId: "helpTopicId" }, outputs: { languageChanged: "languageChanged" }, providers: [MuiHeadernavService], exportAs: ["muiHeaderNav"], usesOnChanges: true, ngImport: i0, template: "<ng-container *ngFor=\"let item of navItems\">\r\n\r\n  <ng-container [ngSwitch]=\"item['type']\">\r\n    <div class=\"search-container\" *ngSwitchCase=\"'search'\">\r\n      <div class=\"search-controls\" [class.hidden]=\"searchFieldHidden\">\r\n      <button mat-icon-button (click)=\"searchFieldHidden = !searchFieldHidden\">\r\n        <mat-icon>search</mat-icon>\r\n      </button>\r\n      <mat-form-field class=\"search-field\">\r\n        <input type=\"text\" matInput #search (keyup.enter)=\"onSearchTermEntered(search.value, item.href)\"/>\r\n        <button mat-button matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"search.value = ''\">\r\n          <mat-icon class=\"search-clear-icon\">close</mat-icon>\r\n        </button>\r\n      </mat-form-field>\r\n      </div>\r\n    </div>\r\n\r\n    <ng-container *ngSwitchCase=\"'notification'\">\r\n      <button mat-icon-button *ngIf=\"notificationCenterEnabled\" (click)=\"toggleNotificationPanel()\">\r\n        <mat-icon class=\"nc-notification-icon\" [matBadge]=\"notificationCount | async\"\r\n          [matBadgeHidden]=\"notificationBadgeHidden | async\" matBadgeColor=\"warn\">notifications</mat-icon>\r\n      </button>\r\n    </ng-container>\r\n\r\n    <ng-container *ngSwitchCase=\"'help'\">\r\n      <button mat-icon-button [matMenuTriggerFor]=\"helpMenu\">\r\n        <mat-icon>help</mat-icon>\r\n      </button>\r\n      <mat-menu #helpMenu=\"matMenu\" [overlapTrigger]=\"false\">\r\n        <a *ngFor=\"let menuItem of item.menu\" mat-menu-item [href]=\"menuItem.href\"\r\n          (click)=\"menuItemClicked($event, menuItem)\">{{ menuItem.name }}</a>\r\n      </mat-menu>\r\n    </ng-container>\r\n\r\n    <ng-container *ngSwitchCase=\"'appSwitcher'\">\r\n      <button mat-icon-button [matMenuTriggerFor]=\"appsMenu\">\r\n        <mat-icon>apps</mat-icon>\r\n      </button>\r\n      <mat-menu #appsMenu=\"matMenu\" [overlapTrigger]=\"false\">\r\n        <a *ngFor=\"let menuItem of item.menu\" mat-menu-item [href]=\"menuItem.href\"\r\n          (click)=\"menuItemClicked($event, menuItem)\">{{ menuItem.name }}</a>\r\n      </mat-menu>\r\n    </ng-container>\r\n\r\n    <ng-container *ngSwitchCase=\"'langSwitcher'\">\r\n      <button mat-icon-button [matMenuTriggerFor]=\"langMenu\" class=\"text-nav-button\">\r\n        <span class=\"button-text\">{{ item.name }}</span>\r\n      </button>\r\n      <mat-menu #langMenu=\"matMenu\" [overlapTrigger]=\"false\">\r\n        <a *ngFor=\"let menuItem of item.menu\" mat-menu-item [href]=\"menuItem.href\"\r\n          (click)=\"menuItemClicked($event, menuItem)\">{{ menuItem.name }}</a>\r\n      </mat-menu>\r\n    </ng-container>\r\n\r\n    <mui-session-timer *ngSwitchCase=\"'sessionTimer'\" [navItem]=\"item\" [trackClicks]=\"trackClicks\">\r\n    </mui-session-timer>\r\n\r\n    <ng-container *ngSwitchCase=\"'user'\">\r\n      <button mat-icon-button [matMenuTriggerFor]=\"userMenu\">\r\n        <mat-icon>person</mat-icon>\r\n      </button>\r\n      <mat-menu #userMenu=\"matMenu\" [overlapTrigger]=\"false\">\r\n        <a *ngFor=\"let menuItem of item.menu\" mat-menu-item [href]=\"menuItem.href\"\r\n          (click)=\"menuItemClicked($event, menuItem)\">{{ menuItem.name }}</a>\r\n      </mat-menu>\r\n    </ng-container>\r\n\r\n  </ng-container>\r\n</ng-container>\r\n", styles: [".search-field{background-color:#fff;color:#000000de;padding:0 5px;height:52px;width:200px}.search-clear-icon{color:#000000de;line-height:inherit!important}.text-nav-button{font-size:16px;font-weight:400;vertical-align:middle;cursor:pointer}.search-container{position:relative;display:inline-block;overflow:hidden;vertical-align:middle}.search-controls{position:relative;display:inline-block;right:0;transition:.4s ease}.search-controls.hidden{right:-210px}\n"], dependencies: [{ kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i4.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "component", type: i5.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "component", type: i6.MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i6.MatIconButton, selector: "button[mat-icon-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i7.MatMenu, selector: "mat-menu", exportAs: ["matMenu"] }, { kind: "component", type: i7.MatMenuItem, selector: "[mat-menu-item]", inputs: ["disabled", "disableRipple", "role"], exportAs: ["matMenuItem"] }, { kind: "directive", type: i7.MatMenuTrigger, selector: "[mat-menu-trigger-for], [matMenuTriggerFor]", exportAs: ["matMenuTrigger"] }, { kind: "directive", type: i8.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "component", type: i9.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i9.MatSuffix, selector: "[matSuffix], [matIconSuffix], [matTextSuffix]", inputs: ["matTextSuffix"] }, { kind: "directive", type: i10.MatBadge, selector: "[matBadge]", inputs: ["matBadgeDisabled", "matBadgeColor", "matBadgeOverlap", "matBadgePosition", "matBadge", "matBadgeDescription", "matBadgeSize", "matBadgeHidden"] }, { kind: "component", type: i11.SessionTimerComponent, selector: "mui-session-timer", inputs: ["navItem", "trackClicks"], exportAs: ["muiSessionTimer"] }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: MuiHeadernavComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mui-headernav', exportAs: 'muiHeaderNav', providers: [MuiHeadernavService], template: "<ng-container *ngFor=\"let item of navItems\">\r\n\r\n  <ng-container [ngSwitch]=\"item['type']\">\r\n    <div class=\"search-container\" *ngSwitchCase=\"'search'\">\r\n      <div class=\"search-controls\" [class.hidden]=\"searchFieldHidden\">\r\n      <button mat-icon-button (click)=\"searchFieldHidden = !searchFieldHidden\">\r\n        <mat-icon>search</mat-icon>\r\n      </button>\r\n      <mat-form-field class=\"search-field\">\r\n        <input type=\"text\" matInput #search (keyup.enter)=\"onSearchTermEntered(search.value, item.href)\"/>\r\n        <button mat-button matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"search.value = ''\">\r\n          <mat-icon class=\"search-clear-icon\">close</mat-icon>\r\n        </button>\r\n      </mat-form-field>\r\n      </div>\r\n    </div>\r\n\r\n    <ng-container *ngSwitchCase=\"'notification'\">\r\n      <button mat-icon-button *ngIf=\"notificationCenterEnabled\" (click)=\"toggleNotificationPanel()\">\r\n        <mat-icon class=\"nc-notification-icon\" [matBadge]=\"notificationCount | async\"\r\n          [matBadgeHidden]=\"notificationBadgeHidden | async\" matBadgeColor=\"warn\">notifications</mat-icon>\r\n      </button>\r\n    </ng-container>\r\n\r\n    <ng-container *ngSwitchCase=\"'help'\">\r\n      <button mat-icon-button [matMenuTriggerFor]=\"helpMenu\">\r\n        <mat-icon>help</mat-icon>\r\n      </button>\r\n      <mat-menu #helpMenu=\"matMenu\" [overlapTrigger]=\"false\">\r\n        <a *ngFor=\"let menuItem of item.menu\" mat-menu-item [href]=\"menuItem.href\"\r\n          (click)=\"menuItemClicked($event, menuItem)\">{{ menuItem.name }}</a>\r\n      </mat-menu>\r\n    </ng-container>\r\n\r\n    <ng-container *ngSwitchCase=\"'appSwitcher'\">\r\n      <button mat-icon-button [matMenuTriggerFor]=\"appsMenu\">\r\n        <mat-icon>apps</mat-icon>\r\n      </button>\r\n      <mat-menu #appsMenu=\"matMenu\" [overlapTrigger]=\"false\">\r\n        <a *ngFor=\"let menuItem of item.menu\" mat-menu-item [href]=\"menuItem.href\"\r\n          (click)=\"menuItemClicked($event, menuItem)\">{{ menuItem.name }}</a>\r\n      </mat-menu>\r\n    </ng-container>\r\n\r\n    <ng-container *ngSwitchCase=\"'langSwitcher'\">\r\n      <button mat-icon-button [matMenuTriggerFor]=\"langMenu\" class=\"text-nav-button\">\r\n        <span class=\"button-text\">{{ item.name }}</span>\r\n      </button>\r\n      <mat-menu #langMenu=\"matMenu\" [overlapTrigger]=\"false\">\r\n        <a *ngFor=\"let menuItem of item.menu\" mat-menu-item [href]=\"menuItem.href\"\r\n          (click)=\"menuItemClicked($event, menuItem)\">{{ menuItem.name }}</a>\r\n      </mat-menu>\r\n    </ng-container>\r\n\r\n    <mui-session-timer *ngSwitchCase=\"'sessionTimer'\" [navItem]=\"item\" [trackClicks]=\"trackClicks\">\r\n    </mui-session-timer>\r\n\r\n    <ng-container *ngSwitchCase=\"'user'\">\r\n      <button mat-icon-button [matMenuTriggerFor]=\"userMenu\">\r\n        <mat-icon>person</mat-icon>\r\n      </button>\r\n      <mat-menu #userMenu=\"matMenu\" [overlapTrigger]=\"false\">\r\n        <a *ngFor=\"let menuItem of item.menu\" mat-menu-item [href]=\"menuItem.href\"\r\n          (click)=\"menuItemClicked($event, menuItem)\">{{ menuItem.name }}</a>\r\n      </mat-menu>\r\n    </ng-container>\r\n\r\n  </ng-container>\r\n</ng-container>\r\n", styles: [".search-field{background-color:#fff;color:#000000de;padding:0 5px;height:52px;width:200px}.search-clear-icon{color:#000000de;line-height:inherit!important}.text-nav-button{font-size:16px;font-weight:400;vertical-align:middle;cursor:pointer}.search-container{position:relative;display:inline-block;overflow:hidden;vertical-align:middle}.search-controls{position:relative;display:inline-block;right:0;transition:.4s ease}.search-controls.hidden{right:-210px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.MuiHeadernavService }, { type: i2.MatDialog }, { type: i3.NotificationService, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { apiUrl: [{
                type: Input
            }], handleLanguageChange: [{
                type: Input
            }], notificationCenter: [{
                type: Input
            }], trackClicks: [{
                type: Input
            }], helpTopicId: [{
                type: Input
            }], languageChanged: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,