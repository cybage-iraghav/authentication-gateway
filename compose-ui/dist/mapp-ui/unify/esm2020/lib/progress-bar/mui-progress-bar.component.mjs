import { coerceNumberProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, Component, ContentChildren, Input } from '@angular/core';
import { merge, Subject, switchMap } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { MuiProgressStepComponent } from './mui-progress-step.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@mapp-ui/common";
import * as i3 from "@angular/material/card";
import * as i4 from "./mui-step-header.component";
export class MuiProgressBarComponent {
    constructor(cd) {
        this.cd = cd;
        /**
         * Whether to override the disabled state handling of the 'Next' button. By default, button is disabled as long
         * as the Control component bound to [stepControl] is invalid. By setting this input to true, the button's disabled
         * state will need to be handled manually. If no [stepControl] is assigned, button state will need to be
         * handled manually as well. */
        this.manualButtonHandling = false;
        this._selectedIndex = 0;
        this.destroyed$ = new Subject();
    }
    get selectedIndex() {
        return this._selectedIndex;
    }
    set selectedIndex(index) {
        const newIndex = coerceNumberProperty(index);
        if (newIndex < 0 || (newIndex > this.steps?.length)) {
            throw Error('muiStepper: cannot set selected index out of bounds.');
        }
        if (this.steps) {
            this.selected?.markAsInteracted();
        }
        this._selectedIndex = newIndex;
        this.stateChanged();
    }
    /** The step that is selected. */
    get selected() {
        return this.steps ? this.steps.toArray()[this.selectedIndex] : undefined;
    }
    set selected(step) {
        this.selectedIndex = step && this.steps ?
            this.steps.toArray()
                .indexOf(step) :
            -1;
    }
    ngAfterContentInit() {
        // monitor changes of mui-step children
        this.steps.changes
            .pipe(takeUntil(this.destroyed$), switchMap(() => {
            const stepChanges = this.steps.map(step => step.changes);
            return merge(...stepChanges);
        }))
            .subscribe(() => {
            this.stateChanged();
        });
    }
    ngOnDestroy() {
        this.destroyed$.next();
        this.destroyed$.complete();
    }
    stateChanged() {
        this.cd.markForCheck();
    }
    isStepActive(index) {
        return this.selectedIndex > index;
    }
    stepClicked(index, step) {
        if (this.isStepActive(index) && index !== this.selectedIndex) {
            this.selected = step;
        }
    }
    /**
     * Moves to the next step, if there are no errors on the current step.
     * Otherwise, if the current step form is invalid, marks all fields as touched to trigger error display.
     */
    next() {
        if (this.selected?.stepControl?.invalid || this.selected?.stepControl?.pending) {
            this.selected.stepControl.markAllAsTouched();
            this.selected.markAsInteracted();
        }
        else {
            this.selectedIndex = Math.min(this._selectedIndex + 1, this.steps.length - 1);
        }
    }
}
MuiProgressBarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: MuiProgressBarComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
MuiProgressBarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.10", type: MuiProgressBarComponent, selector: "mui-progress-bar", inputs: { stepperTitle: "stepperTitle", manualButtonHandling: "manualButtonHandling", selectedIndex: "selectedIndex", selected: "selected" }, queries: [{ propertyName: "steps", predicate: MuiProgressStepComponent }], ngImport: i0, template: "<div class=\"mui-progress-bar-wrapper\">\r\n  <div class=\"mui-progress-header-container\">\r\n    <div *ngIf=\"stepperTitle\"\r\n        class=\"mui-progress-bar-title mat-h4\">{{ stepperTitle }}</div>\r\n    <div class=\"mui-progress-steps-container\">\r\n      <ng-container *ngFor=\"let step of steps; let i = index; let isLast = last\">\r\n        <mui-step-header\r\n            (click)=\"stepClicked(i, step)\"\r\n            [active]=\"isStepActive(i)\"\r\n            [completed]=\"step.completed\"\r\n            [label]=\"step.label\"\r\n            [selected]=\"selectedIndex === i\"\r\n        ></mui-step-header>\r\n        <div *ngIf=\"!isLast\"\r\n            class=\"mui-step-divider\">\r\n          <mui-icon>chevron_right</mui-icon>\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n  <div class=\"mui-progress-bar-content-container\">\r\n    <mat-card appearance=\"outlined\">\r\n      <div *ngFor=\"let step of steps; let i = index;\"\r\n          [class.mui-progress-bar-content-hidden]=\"selectedIndex !== i\"\r\n          class=\"mui-progress-bar-content\"\r\n      >\r\n        <ng-container [ngTemplateOutlet]=\"step.content\"></ng-container>\r\n\r\n      </div>\r\n    </mat-card>\r\n  </div>\r\n  <ng-container [ngTemplateOutlet]=\"selected?.actionsTemplate ?? null\"></ng-container>\r\n</div>\r\n", styles: [".mui-progress-bar-wrapper{overflow:hidden;display:flex;flex-direction:column;height:100%}.mui-progress-header-container{background-color:#fff;height:56px;display:grid;grid-template-columns:1fr auto 1fr;align-items:center;flex:0 0 auto;z-index:2;position:relative;box-shadow:0 0 4px #ccd3df66}.mui-progress-steps-container{display:flex;align-items:center;justify-content:center}.mui-progress-bar-title{padding-left:40px}.mui-progress-bar-title.mat-h4{margin:0}.mui-progress-bar-content-container{flex:1 1 auto;padding:24px;box-sizing:border-box;position:relative;overflow:auto}.mui-progress-bar-content-container>.mat-mdc-card{padding:40px 40px 24px}.mui-progress-bar-content-hidden{visibility:hidden;overflow:hidden;height:0}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i2.MuiIconComponent, selector: "mui-icon", inputs: ["color", "inline"], exportAs: ["muiIcon"] }, { kind: "component", type: i3.MatCard, selector: "mat-card", inputs: ["appearance"], exportAs: ["matCard"] }, { kind: "component", type: i4.MuiStepHeaderComponent, selector: "mui-step-header", inputs: ["label", "active", "completed", "selected"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: MuiProgressBarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mui-progress-bar', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"mui-progress-bar-wrapper\">\r\n  <div class=\"mui-progress-header-container\">\r\n    <div *ngIf=\"stepperTitle\"\r\n        class=\"mui-progress-bar-title mat-h4\">{{ stepperTitle }}</div>\r\n    <div class=\"mui-progress-steps-container\">\r\n      <ng-container *ngFor=\"let step of steps; let i = index; let isLast = last\">\r\n        <mui-step-header\r\n            (click)=\"stepClicked(i, step)\"\r\n            [active]=\"isStepActive(i)\"\r\n            [completed]=\"step.completed\"\r\n            [label]=\"step.label\"\r\n            [selected]=\"selectedIndex === i\"\r\n        ></mui-step-header>\r\n        <div *ngIf=\"!isLast\"\r\n            class=\"mui-step-divider\">\r\n          <mui-icon>chevron_right</mui-icon>\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n  <div class=\"mui-progress-bar-content-container\">\r\n    <mat-card appearance=\"outlined\">\r\n      <div *ngFor=\"let step of steps; let i = index;\"\r\n          [class.mui-progress-bar-content-hidden]=\"selectedIndex !== i\"\r\n          class=\"mui-progress-bar-content\"\r\n      >\r\n        <ng-container [ngTemplateOutlet]=\"step.content\"></ng-container>\r\n\r\n      </div>\r\n    </mat-card>\r\n  </div>\r\n  <ng-container [ngTemplateOutlet]=\"selected?.actionsTemplate ?? null\"></ng-container>\r\n</div>\r\n", styles: [".mui-progress-bar-wrapper{overflow:hidden;display:flex;flex-direction:column;height:100%}.mui-progress-header-container{background-color:#fff;height:56px;display:grid;grid-template-columns:1fr auto 1fr;align-items:center;flex:0 0 auto;z-index:2;position:relative;box-shadow:0 0 4px #ccd3df66}.mui-progress-steps-container{display:flex;align-items:center;justify-content:center}.mui-progress-bar-title{padding-left:40px}.mui-progress-bar-title.mat-h4{margin:0}.mui-progress-bar-content-container{flex:1 1 auto;padding:24px;box-sizing:border-box;position:relative;overflow:auto}.mui-progress-bar-content-container>.mat-mdc-card{padding:40px 40px 24px}.mui-progress-bar-content-hidden{visibility:hidden;overflow:hidden;height:0}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { steps: [{
                type: ContentChildren,
                args: [MuiProgressStepComponent]
            }], stepperTitle: [{
                type: Input
            }], manualButtonHandling: [{
                type: Input
            }], selectedIndex: [{
                type: Input
            }], selected: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,